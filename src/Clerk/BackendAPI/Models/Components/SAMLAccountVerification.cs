//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    

    public class SAMLAccountVerificationType
    {
        private SAMLAccountVerificationType(string value) { Value = value; }

        public string Value { get; private set; }
        
        public static SAMLAccountVerificationType VerificationSaml { get { return new SAMLAccountVerificationType("verification_saml"); } }
        public static SAMLAccountVerificationType VerificationTicket { get { return new SAMLAccountVerificationType("verification_ticket"); } }
        public static SAMLAccountVerificationType Null { get { return new SAMLAccountVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SAMLAccountVerificationType v) { return v.Value; }
        public static SAMLAccountVerificationType FromString(string v) {
            switch(v) {
                case "verification_saml": return VerificationSaml;
                case "verification_ticket": return VerificationTicket;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SAMLAccountVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SAMLAccountVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(SAMLAccountVerification.SAMLAccountVerificationConverter))]
    public class SAMLAccountVerification {
        public SAMLAccountVerification(SAMLAccountVerificationType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationSAML? VerificationSAML { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationTicket? VerificationTicket { get; set; }

        public SAMLAccountVerificationType Type { get; set; }


        public static SAMLAccountVerification CreateVerificationSaml(VerificationSAML verificationSaml) {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.VerificationSaml;
        
            string typStr = SAMLAccountVerificationType.VerificationSaml.ToString();
            
            verificationSaml.Object = VerificationSAMLVerificationSAMLAccountObjectExtension.ToEnum(SAMLAccountVerificationType.VerificationSaml.ToString());
            SAMLAccountVerification res = new SAMLAccountVerification(typ);
            res.VerificationSAML = verificationSaml;
            return res;
        }
        public static SAMLAccountVerification CreateVerificationTicket(VerificationTicket verificationTicket) {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.VerificationTicket;
        
            string typStr = SAMLAccountVerificationType.VerificationTicket.ToString();
            
            verificationTicket.Object = VerificationTicketVerificationSAMLAccountObjectExtension.ToEnum(SAMLAccountVerificationType.VerificationTicket.ToString());
            SAMLAccountVerification res = new SAMLAccountVerification(typ);
            res.VerificationTicket = verificationTicket;
            return res;
        }
        public static SAMLAccountVerification CreateNull() {
            SAMLAccountVerificationType typ = SAMLAccountVerificationType.Null;
            return new SAMLAccountVerification(typ);
        }

        public class SAMLAccountVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(SAMLAccountVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("object")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == SAMLAccountVerificationType.VerificationSaml.ToString())
                {
                    VerificationSAML? verificationSAML = ResponseBodyDeserializer.Deserialize<VerificationSAML>(jo.ToString());
                    return CreateVerificationSaml(verificationSAML!);
                }
                if (discriminator == SAMLAccountVerificationType.VerificationTicket.ToString())
                {
                    VerificationTicket? verificationTicket = ResponseBodyDeserializer.Deserialize<VerificationTicket>(jo.ToString());
                    return CreateVerificationTicket(verificationTicket!);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                SAMLAccountVerification res = (SAMLAccountVerification)value;
                if (SAMLAccountVerificationType.FromString(res.Type).Equals(SAMLAccountVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.VerificationSAML != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationSAML));
                    return;
                }
                if (res.VerificationTicket != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationTicket));
                    return;
                }

            }

        }

    }
}