//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    [JsonConverter(typeof(OpenEnumConverter))]
    public class Strategy : IEquatable<Strategy>
    {
        public static readonly Strategy PhoneCode = new Strategy("phone_code");
        public static readonly Strategy EmailCode = new Strategy("email_code");
        public static readonly Strategy ResetPasswordEmailCode = new Strategy("reset_password_email_code");

        private static readonly Dictionary <string, Strategy> _knownValues =
            new Dictionary <string, Strategy> ()
            {
                ["phone_code"] = PhoneCode,
                ["email_code"] = EmailCode,
                ["reset_password_email_code"] = ResetPasswordEmailCode
            };

        private static readonly ConcurrentDictionary<string, Strategy> _values =
            new ConcurrentDictionary<string, Strategy>(_knownValues);

        private Strategy(string value)
        {
            if (value == null) throw new ArgumentNullException(nameof(value));
            Value = value;
        }

        public string Value { get; }

        public static Strategy Of(string value)
        {
            return _values.GetOrAdd(value, _ => new Strategy(value));
        }

        public static implicit operator Strategy(string value) => Of(value);
        public static implicit operator string(Strategy strategy) => strategy.Value;

        public static Strategy[] Values()
        {
            return _values.Values.ToArray();
        }

        public override string ToString() => Value.ToString();

        public bool IsKnown()
        {
            return _knownValues.ContainsKey(Value);
        }

        public override bool Equals(object? obj) => Equals(obj as Strategy);

        public bool Equals(Strategy? other)
        {
            if (ReferenceEquals(this, other)) return true;
            if (other is null) return false;
            return string.Equals(Value, other.Value);
        }

        public override int GetHashCode() => Value.GetHashCode();
    }

}