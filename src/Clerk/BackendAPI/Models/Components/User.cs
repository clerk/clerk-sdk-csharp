//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    /// <summary>
    /// Success
    /// </summary>
    public class User
    {

        [JsonProperty("id")]
        public string Id { get; set; } = default!;

        /// <summary>
        /// String representing the object&apos;s type. Objects of the same type share the same value.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("object")]
        public UserObject Object { get; set; } = default!;

        [JsonProperty("external_id", NullValueHandling = NullValueHandling.Include)]
        public string? ExternalId { get; set; }

        [JsonProperty("primary_email_address_id", NullValueHandling = NullValueHandling.Include)]
        public string? PrimaryEmailAddressId { get; set; }

        [JsonProperty("primary_phone_number_id", NullValueHandling = NullValueHandling.Include)]
        public string? PrimaryPhoneNumberId { get; set; }

        [JsonProperty("primary_web3_wallet_id", NullValueHandling = NullValueHandling.Include)]
        public string? PrimaryWeb3WalletId { get; set; }

        [JsonProperty("username", NullValueHandling = NullValueHandling.Include)]
        public string? Username { get; set; }

        [JsonProperty("first_name", NullValueHandling = NullValueHandling.Include)]
        public string? FirstName { get; set; }

        [JsonProperty("last_name", NullValueHandling = NullValueHandling.Include)]
        public string? LastName { get; set; }

        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("profile_image_url")]
        public string? ProfileImageUrl { get; set; }

        [JsonProperty("image_url")]
        public string? ImageUrl { get; set; }

        [JsonProperty("has_image")]
        public bool HasImage { get; set; } = default!;

        [JsonProperty("public_metadata")]
        public Dictionary<string, object> PublicMetadata { get; set; } = default!;

        [JsonProperty("private_metadata")]
        public Dictionary<string, object>? PrivateMetadata { get; set; } = null;

        [JsonProperty("unsafe_metadata")]
        public Dictionary<string, object>? UnsafeMetadata { get; set; }

        [JsonProperty("email_addresses")]
        public List<EmailAddress> EmailAddresses { get; set; } = default!;

        [JsonProperty("phone_numbers")]
        public List<PhoneNumber> PhoneNumbers { get; set; } = default!;

        [JsonProperty("web3_wallets")]
        public List<Web3Wallet> Web3Wallets { get; set; } = default!;

        [JsonProperty("passkeys")]
        public List<Passkey> Passkeys { get; set; } = default!;

        [JsonProperty("password_enabled")]
        public bool PasswordEnabled { get; set; } = default!;

        [JsonProperty("two_factor_enabled")]
        public bool TwoFactorEnabled { get; set; } = default!;

        [JsonProperty("totp_enabled")]
        public bool TotpEnabled { get; set; } = default!;

        [JsonProperty("backup_code_enabled")]
        public bool BackupCodeEnabled { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("mfa_enabled_at", NullValueHandling = NullValueHandling.Include)]
        public long? MfaEnabledAt { get; set; }

        /// <summary>
        /// Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("mfa_disabled_at", NullValueHandling = NullValueHandling.Include)]
        public long? MfaDisabledAt { get; set; }

        [JsonProperty("external_accounts")]
        public List<ExternalAccountWithVerification> ExternalAccounts { get; set; } = default!;

        [JsonProperty("saml_accounts")]
        public List<SAMLAccount> SamlAccounts { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of last sign-in.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_sign_in_at", NullValueHandling = NullValueHandling.Include)]
        public long? LastSignInAt { get; set; }

        /// <summary>
        /// Flag to denote whether user is banned or not.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("banned")]
        public bool Banned { get; set; } = default!;

        /// <summary>
        /// Flag to denote whether user is currently locked, i.e. restricted from signing in or not.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("locked")]
        public bool Locked { get; set; } = default!;

        /// <summary>
        /// The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("lockout_expires_in_seconds", NullValueHandling = NullValueHandling.Include)]
        public long? LockoutExpiresInSeconds { get; set; }

        /// <summary>
        /// The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("verification_attempts_remaining", NullValueHandling = NullValueHandling.Include)]
        public long? VerificationAttemptsRemaining { get; set; }

        /// <summary>
        /// Unix timestamp of last update.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("updated_at")]
        public long UpdatedAt { get; set; } = default!;

        /// <summary>
        /// Unix timestamp of creation.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("created_at")]
        public long CreatedAt { get; set; } = default!;

        /// <summary>
        /// If enabled, user can delete themselves via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("delete_self_enabled")]
        public bool DeleteSelfEnabled { get; set; } = default!;

        /// <summary>
        /// If enabled, user can create organizations via FAPI.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organization_enabled")]
        public bool CreateOrganizationEnabled { get; set; } = default!;

        /// <summary>
        /// The maximum number of organizations the user can create. 0 means unlimited.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("create_organizations_limit")]
        public long? CreateOrganizationsLimit { get; set; } = null;

        /// <summary>
        /// Unix timestamp of the latest session activity, with day precision.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("last_active_at", NullValueHandling = NullValueHandling.Include)]
        public long? LastActiveAt { get; set; }

        /// <summary>
        /// Unix timestamp of when the user accepted the legal requirements.<br/>
        /// 
        /// <remarks>
        /// 
        /// </remarks>
        /// </summary>
        [JsonProperty("legal_accepted_at", NullValueHandling = NullValueHandling.Include)]
        public long? LegalAcceptedAt { get; set; }
    }
}