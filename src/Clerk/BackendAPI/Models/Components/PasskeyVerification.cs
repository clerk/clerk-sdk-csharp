//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Components
{
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;
    using System;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;

    public class PasskeyVerificationType
    {
        private PasskeyVerificationType(string value) { Value = value; }

        public string Value { get; private set; }

        public static PasskeyVerificationType VerificationPasskey { get { return new PasskeyVerificationType("verification_passkey"); } }

        public static PasskeyVerificationType Null { get { return new PasskeyVerificationType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(PasskeyVerificationType v) { return v.Value; }
        public static PasskeyVerificationType FromString(string v) {
            switch(v) {
                case "verification_passkey": return VerificationPasskey;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for PasskeyVerificationType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((PasskeyVerificationType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    [JsonConverter(typeof(PasskeyVerification.PasskeyVerificationConverter))]
    public class PasskeyVerification
    {
        public PasskeyVerification(PasskeyVerificationType type)
        {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public VerificationPasskey? VerificationPasskey { get; set; }

        public PasskeyVerificationType Type { get; set; }

        public static PasskeyVerification CreateVerificationPasskey(VerificationPasskey verificationPasskey)
        {
            PasskeyVerificationType typ = PasskeyVerificationType.VerificationPasskey;
            string typStr = PasskeyVerificationType.VerificationPasskey.ToString();
            verificationPasskey.Object = VerificationPasskeyVerificationObjectExtension.ToEnum(PasskeyVerificationType.VerificationPasskey.ToString());
            PasskeyVerification res = new PasskeyVerification(typ);
            res.VerificationPasskey = verificationPasskey;
            return res;
        }

        public static PasskeyVerification CreateNull()
        {
            PasskeyVerificationType typ = PasskeyVerificationType.Null;
            return new PasskeyVerification(typ);
        }

        public class PasskeyVerificationConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(PasskeyVerification);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                string discriminator = jo.GetValue("object")?.ToString() ?? throw new ArgumentNullException("Could not find discriminator field.");
                if (discriminator == PasskeyVerificationType.VerificationPasskey.ToString())
                {
                    VerificationPasskey verificationPasskey = ResponseBodyDeserializer.DeserializeNotNull<VerificationPasskey>(jo.ToString());
                    return CreateVerificationPasskey(verificationPasskey);
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }

                PasskeyVerification res = (PasskeyVerification)value;
                if (PasskeyVerificationType.FromString(res.Type).Equals(PasskeyVerificationType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }

                if (res.VerificationPasskey != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.VerificationPasskey));
                    return;
                }
            }

        }

    }
}