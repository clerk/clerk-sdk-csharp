//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Utils;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    
    public class UpdateOAuthApplicationRequestBody
    {

        /// <summary>
        /// The new name of the OAuth application.<br/>
        /// 
        /// <remarks>
        /// Max length: 256
        /// </remarks>
        /// </summary>
        [JsonProperty("name")]
        public string? Name { get; set; } = null;

        /// <summary>
        /// An array of redirect URIs of the new OAuth application
        /// </summary>
        [JsonProperty("redirect_uris")]
        public List<string>? RedirectUris { get; set; } = null;

        /// <summary>
        /// The new callback URL of the OAuth application
        /// </summary>
        [Obsolete("This field will be removed in a future release, please migrate away from it as soon as possible")]
        [JsonProperty("callback_url")]
        public string? CallbackUrl { get; set; } = null;

        /// <summary>
        /// Define the allowed scopes for the new OAuth applications that dictate the user payload of the OAuth user info endpoint. Available scopes are `profile`, `email`, `public_metadata`, `private_metadata`. Provide the requested scopes as a string, separated by spaces.
        /// </summary>
        [JsonProperty("scopes")]
        public string? Scopes { get; set; } = "profile email";

        /// <summary>
        /// True to enable a consent screen to display in the authentication flow. This cannot be disabled for dynamically registered OAuth Applications.
        /// </summary>
        [JsonProperty("consent_screen_enabled")]
        public bool? ConsentScreenEnabled { get; set; } = null;

        /// <summary>
        /// True to require the Proof Key of Code Exchange (PKCE) flow.
        /// </summary>
        [JsonProperty("pkce_required")]
        public bool? PkceRequired { get; set; } = null;

        /// <summary>
        /// If true, this client is public and you can use the Proof Key of Code Exchange (PKCE) flow.
        /// </summary>
        [JsonProperty("public")]
        public bool? Public { get; set; } = null;
    }
}