//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI.Models.Operations
{
    using Clerk.BackendAPI.Models.Operations;
    using Clerk.BackendAPI.Utils;
    
    public class ListInvitationsRequest
    {

        /// <summary>
        /// Filter invitations based on their status
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=status")]
        public ListInvitationsQueryParamStatus? Status { get; set; }

        /// <summary>
        /// Filter invitations based on their `email_address` or `id`
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")]
        public string? Query { get; set; }

        /// <summary>
        /// Allows to return invitations in a particular order.<br/>
        /// 
        /// <remarks>
        /// At the moment, you can order the returned invitations either by their `created_at`, `email_address` or `expires_at`.<br/>
        /// In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.<br/>
        /// For example, if you want invitations to be returned in descending order according to their `created_at` property, you can use `-created_at`.<br/>
        /// If you don&apos;t use `+` or `-`, then `+` is implied.<br/>
        /// Defaults to `-created_at`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")]
        public string? OrderBy { get; set; } = "-created_at";

        /// <summary>
        /// Whether to paginate the results.<br/>
        /// 
        /// <remarks>
        /// If true, the results will be paginated.<br/>
        /// If false, the results will not be paginated.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=paginated")]
        public bool? Paginated { get; set; }

        /// <summary>
        /// Applies a limit to the number of results returned.<br/>
        /// 
        /// <remarks>
        /// Can be used for paginating the results together with `offset`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")]
        public long? Limit { get; set; } = 10;

        /// <summary>
        /// Skip the first `offset` results when paginating.<br/>
        /// 
        /// <remarks>
        /// Needs to be an integer greater or equal to zero.<br/>
        /// To be used in conjunction with `limit`.
        /// </remarks>
        /// </summary>
        [SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")]
        public long? Offset { get; set; } = 0;
    }
}