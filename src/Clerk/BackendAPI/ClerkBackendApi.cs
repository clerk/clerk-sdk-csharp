//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Clerk.BackendAPI
{
    using Clerk.BackendAPI.Hooks;
    using Clerk.BackendAPI.Models.Components;
    using Clerk.BackendAPI.Models.Errors;
    using Clerk.BackendAPI.Utils;
    using Clerk.BackendAPI.Utils.Retries;
    using Newtonsoft.Json;
    using System;
    using System.Collections.Generic;
    using System.Net.Http;
    using System.Threading.Tasks;

    /// <summary>
    /// Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Versions<br/>
    /// <br/>
    /// When the API changes in a way that isn&apos;t compatible with older versions, a new version is released.<br/>
    /// Each version is identified by its release date, e.g. `2025-04-10`. For more information, please see <a href="https://clerk.com/docs/versioning/available-versions">Clerk API Versions</a>.<br/>
    /// <br/>
    /// Please see https://clerk.com/docs for more information.
    /// </remarks>
    /// 
    /// <see>https://clerk.com/docs}</see>
    /// </summary>
    public interface IClerkBackendApi
    {
        public IMiscellaneous Miscellaneous { get; }
        public IJwks Jwks { get; }
        public IAwsCredentials AwsCredentials { get; }
        public IClients Clients { get; }
        public IEmailAddresses EmailAddresses { get; }
        public IPhoneNumbers PhoneNumbers { get; }
        public ISessions Sessions { get; }
        public IEmailSMSTemplates EmailSMSTemplates { get; }
        public IEmailAndSmsTemplates EmailAndSmsTemplates { get; }
        public ITemplates Templates { get; }
        public IUsers Users { get; }
        public IInvitations Invitations { get; }
        public IOrganizationInvitations OrganizationInvitations { get; }
        public IAllowlistIdentifiers AllowlistIdentifiers { get; }
        public IBlocklistIdentifiers BlocklistIdentifiers { get; }
        public IBetaFeatures BetaFeatures { get; }
        public IActorTokens ActorTokens { get; }
        public IDomains Domains { get; }
        public IInstanceSettings InstanceSettings { get; }
        public IWebhooks Webhooks { get; }
        public IJwtTemplates JwtTemplates { get; }
        public IMachines Machines { get; }
        public IOrganizations Organizations { get; }
        public IOrganizationMemberships OrganizationMemberships { get; }
        public IOrganizationDomains OrganizationDomains { get; }
        public IProxyChecks ProxyChecks { get; }
        public IRedirectUrls RedirectUrls { get; }
        public ISignInTokens SignInTokens { get; }
        public ISignUps SignUps { get; }
        public IOauthApplications OauthApplications { get; }
        public ISamlConnections SamlConnections { get; }
        public ITestingTokens TestingTokens { get; }
        public IWaitlistEntries WaitlistEntries { get; }
        public IExperimentalAccountlessApplications ExperimentalAccountlessApplications { get; }
        public ICommerce Commerce { get; }
        public IM2m M2m { get; }
        public IOauthAccessTokens OauthAccessTokens { get; }
    }


    /// <summary>
    /// Clerk Backend API: The Clerk REST Backend API, meant to be accessed by backend servers.<br/>
    /// 
    /// <remarks>
    /// <br/>
    /// ### Versions<br/>
    /// <br/>
    /// When the API changes in a way that isn&apos;t compatible with older versions, a new version is released.<br/>
    /// Each version is identified by its release date, e.g. `2025-04-10`. For more information, please see <a href="https://clerk.com/docs/versioning/available-versions">Clerk API Versions</a>.<br/>
    /// <br/>
    /// Please see https://clerk.com/docs for more information.
    /// </remarks>
    /// 
    /// <see>https://clerk.com/docs}</see>
    /// </summary>
    public class ClerkBackendApi: IClerkBackendApi
    {
        public SDKConfig SDKConfiguration { get; private set; }

        private const string _language = "csharp";
        private const string _sdkVersion = "0.12.0";
        private const string _sdkGenVersion = "2.687.13";
        private const string _openapiDocVersion = "2025-04-10";
        public IMiscellaneous Miscellaneous { get; private set; }
        public IJwks Jwks { get; private set; }
        public IAwsCredentials AwsCredentials { get; private set; }
        public IClients Clients { get; private set; }
        public IEmailAddresses EmailAddresses { get; private set; }
        public IPhoneNumbers PhoneNumbers { get; private set; }
        public ISessions Sessions { get; private set; }
        public IEmailSMSTemplates EmailSMSTemplates { get; private set; }
        public IEmailAndSmsTemplates EmailAndSmsTemplates { get; private set; }
        public ITemplates Templates { get; private set; }
        public IUsers Users { get; private set; }
        public IInvitations Invitations { get; private set; }
        public IOrganizationInvitations OrganizationInvitations { get; private set; }
        public IAllowlistIdentifiers AllowlistIdentifiers { get; private set; }
        public IBlocklistIdentifiers BlocklistIdentifiers { get; private set; }
        public IBetaFeatures BetaFeatures { get; private set; }
        public IActorTokens ActorTokens { get; private set; }
        public IDomains Domains { get; private set; }
        public IInstanceSettings InstanceSettings { get; private set; }
        public IWebhooks Webhooks { get; private set; }
        public IJwtTemplates JwtTemplates { get; private set; }
        public IMachines Machines { get; private set; }
        public IOrganizations Organizations { get; private set; }
        public IOrganizationMemberships OrganizationMemberships { get; private set; }
        public IOrganizationDomains OrganizationDomains { get; private set; }
        public IProxyChecks ProxyChecks { get; private set; }
        public IRedirectUrls RedirectUrls { get; private set; }
        public ISignInTokens SignInTokens { get; private set; }
        public ISignUps SignUps { get; private set; }
        public IOauthApplications OauthApplications { get; private set; }
        public ISamlConnections SamlConnections { get; private set; }
        public ITestingTokens TestingTokens { get; private set; }
        public IWaitlistEntries WaitlistEntries { get; private set; }
        public IExperimentalAccountlessApplications ExperimentalAccountlessApplications { get; private set; }
        public ICommerce Commerce { get; private set; }
        public IM2m M2m { get; private set; }
        public IOauthAccessTokens OauthAccessTokens { get; private set; }

        public ClerkBackendApi(SDKConfig config)
        {
            SDKConfiguration = config;
            InitHooks();

            Miscellaneous = new Miscellaneous(SDKConfiguration);

            Jwks = new Jwks(SDKConfiguration);

            AwsCredentials = new AwsCredentials(SDKConfiguration);

            Clients = new Clients(SDKConfiguration);

            EmailAddresses = new EmailAddresses(SDKConfiguration);

            PhoneNumbers = new PhoneNumbers(SDKConfiguration);

            Sessions = new Sessions(SDKConfiguration);

            EmailSMSTemplates = new EmailSMSTemplates(SDKConfiguration);

            EmailAndSmsTemplates = new EmailAndSmsTemplates(SDKConfiguration);

            Templates = new Templates(SDKConfiguration);

            Users = new Users(SDKConfiguration);

            Invitations = new Invitations(SDKConfiguration);

            OrganizationInvitations = new OrganizationInvitations(SDKConfiguration);

            AllowlistIdentifiers = new AllowlistIdentifiers(SDKConfiguration);

            BlocklistIdentifiers = new BlocklistIdentifiers(SDKConfiguration);

            BetaFeatures = new BetaFeatures(SDKConfiguration);

            ActorTokens = new ActorTokens(SDKConfiguration);

            Domains = new Domains(SDKConfiguration);

            InstanceSettings = new InstanceSettings(SDKConfiguration);

            Webhooks = new Webhooks(SDKConfiguration);

            JwtTemplates = new JwtTemplates(SDKConfiguration);

            Machines = new Machines(SDKConfiguration);

            Organizations = new Organizations(SDKConfiguration);

            OrganizationMemberships = new OrganizationMemberships(SDKConfiguration);

            OrganizationDomains = new OrganizationDomains(SDKConfiguration);

            ProxyChecks = new ProxyChecks(SDKConfiguration);

            RedirectUrls = new RedirectUrls(SDKConfiguration);

            SignInTokens = new SignInTokens(SDKConfiguration);

            SignUps = new SignUps(SDKConfiguration);

            OauthApplications = new OauthApplications(SDKConfiguration);

            SamlConnections = new SamlConnections(SDKConfiguration);

            TestingTokens = new TestingTokens(SDKConfiguration);

            WaitlistEntries = new WaitlistEntries(SDKConfiguration);

            ExperimentalAccountlessApplications = new ExperimentalAccountlessApplications(SDKConfiguration);

            Commerce = new Commerce(SDKConfiguration);

            M2m = new M2m(SDKConfiguration);

            OauthAccessTokens = new OauthAccessTokens(SDKConfiguration);
        }

        public ClerkBackendApi(string? bearerAuth = null, Func<string>? bearerAuthSource = null, int? serverIndex = null, string? serverUrl = null, Dictionary<string, string>? urlParams = null, ISpeakeasyHttpClient? client = null, RetryConfig? retryConfig = null)
        {
            if (serverIndex != null)
            {
                if (serverIndex.Value < 0 || serverIndex.Value >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex.Value}");
                }
            }

            if (serverUrl != null)
            {
                if (urlParams != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, urlParams);
                }
            }
            Func<Clerk.BackendAPI.Models.Components.Security>? _securitySource = null;

            if(bearerAuthSource != null)
            {
                _securitySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuthSource() };
            }
            else if(bearerAuth != null)
            {
                _securitySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuth };
            }

            SDKConfiguration = new SDKConfig(client)
            {
                ServerIndex = serverIndex == null ? 0 : serverIndex.Value,
                ServerUrl = serverUrl == null ? "" : serverUrl,
                SecuritySource = _securitySource,
                RetryConfig = retryConfig
            };

            InitHooks();

            Miscellaneous = new Miscellaneous(SDKConfiguration);

            Jwks = new Jwks(SDKConfiguration);

            AwsCredentials = new AwsCredentials(SDKConfiguration);

            Clients = new Clients(SDKConfiguration);

            EmailAddresses = new EmailAddresses(SDKConfiguration);

            PhoneNumbers = new PhoneNumbers(SDKConfiguration);

            Sessions = new Sessions(SDKConfiguration);

            EmailSMSTemplates = new EmailSMSTemplates(SDKConfiguration);

            EmailAndSmsTemplates = new EmailAndSmsTemplates(SDKConfiguration);

            Templates = new Templates(SDKConfiguration);

            Users = new Users(SDKConfiguration);

            Invitations = new Invitations(SDKConfiguration);

            OrganizationInvitations = new OrganizationInvitations(SDKConfiguration);

            AllowlistIdentifiers = new AllowlistIdentifiers(SDKConfiguration);

            BlocklistIdentifiers = new BlocklistIdentifiers(SDKConfiguration);

            BetaFeatures = new BetaFeatures(SDKConfiguration);

            ActorTokens = new ActorTokens(SDKConfiguration);

            Domains = new Domains(SDKConfiguration);

            InstanceSettings = new InstanceSettings(SDKConfiguration);

            Webhooks = new Webhooks(SDKConfiguration);

            JwtTemplates = new JwtTemplates(SDKConfiguration);

            Machines = new Machines(SDKConfiguration);

            Organizations = new Organizations(SDKConfiguration);

            OrganizationMemberships = new OrganizationMemberships(SDKConfiguration);

            OrganizationDomains = new OrganizationDomains(SDKConfiguration);

            ProxyChecks = new ProxyChecks(SDKConfiguration);

            RedirectUrls = new RedirectUrls(SDKConfiguration);

            SignInTokens = new SignInTokens(SDKConfiguration);

            SignUps = new SignUps(SDKConfiguration);

            OauthApplications = new OauthApplications(SDKConfiguration);

            SamlConnections = new SamlConnections(SDKConfiguration);

            TestingTokens = new TestingTokens(SDKConfiguration);

            WaitlistEntries = new WaitlistEntries(SDKConfiguration);

            ExperimentalAccountlessApplications = new ExperimentalAccountlessApplications(SDKConfiguration);

            Commerce = new Commerce(SDKConfiguration);

            M2m = new M2m(SDKConfiguration);

            OauthAccessTokens = new OauthAccessTokens(SDKConfiguration);
        }

        private void InitHooks()
        {
            string preHooksUrl = SDKConfiguration.GetTemplatedServerUrl();
            var (postHooksUrl, postHooksClient) = SDKConfiguration.Hooks.SDKInit(preHooksUrl, SDKConfiguration.Client);
            var config = SDKConfiguration;
            if (preHooksUrl != postHooksUrl)
            {
                config.ServerUrl = postHooksUrl;
            }
            config.Client = postHooksClient;
            SDKConfiguration = config;
        }

        public class SDKBuilder
        {
            private SDKConfig _sdkConfig = new SDKConfig(client: new SpeakeasyHttpClient());

            public SDKBuilder() { }

            public SDKBuilder WithServerIndex(int serverIndex)
            {
                if (serverIndex < 0 || serverIndex >= SDKConfig.ServerList.Length)
                {
                    throw new Exception($"Invalid server index {serverIndex}");
                }
                _sdkConfig.ServerIndex = serverIndex;
                return this;
            }

            public SDKBuilder WithServerUrl(string serverUrl, Dictionary<string, string>? serverVariables = null)
            {
                if (serverVariables != null)
                {
                    serverUrl = Utilities.TemplateUrl(serverUrl, serverVariables);
                }
                _sdkConfig.ServerUrl = serverUrl;
                return this;
            }

            public SDKBuilder WithBearerAuthSource(Func<string> bearerAuthSource)
            {
                _sdkConfig.SecuritySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuthSource() };
                return this;
            }

            public SDKBuilder WithBearerAuth(string bearerAuth)
            {
                _sdkConfig.SecuritySource = () => new Clerk.BackendAPI.Models.Components.Security() { BearerAuth = bearerAuth };
                return this;
            }

            public SDKBuilder WithClient(ISpeakeasyHttpClient client)
            {
                _sdkConfig.Client = client;
                return this;
            }

            public SDKBuilder WithRetryConfig(RetryConfig retryConfig)
            {
                _sdkConfig.RetryConfig = retryConfig;
                return this;
            }

            public ClerkBackendApi Build()
            {
              return new ClerkBackendApi(_sdkConfig);
            }

        }

        public static SDKBuilder Builder() => new SDKBuilder();
    }
}